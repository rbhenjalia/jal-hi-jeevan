package sih.practice.teststs;

import android.Manifest;
import android.annotation.SuppressLint;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.pm.PackageManager;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.media.MediaScannerConnection;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.provider.Settings;
import android.support.annotation.NonNull;
import android.support.design.widget.FloatingActionButton;
import android.support.design.widget.NavigationView;
import android.support.design.widget.TabLayout;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.view.GravityCompat;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.widget.DrawerLayout;
import android.support.v7.app.ActionBarDrawerToggle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.telephony.SmsManager;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.tasks.OnSuccessListener;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Calendar;

public class MainActivity extends AppCompatActivity
        implements NavigationView.OnNavigationItemSelectedListener,LocationListener,GoogleApiClient.OnConnectionFailedListener {
    //for getting intents
    String UID, pPath, nm, emid;
    TextView em, fn;
    //for photo
    private int GALLERY = 1, CAMERA = 2;
    private static final String IMAGE_DIRECTORY = "/JHJ";
    //for permissions
    static final String PREFS_FILE_NAME="test";
    int MY_PERMISSIONS_REQUEST_FINE_LOCATION=1;
    int MY_PERMISSIONS_REQUEST_RSTORAGE=2;
    int MY_PERMISSIONS_REQUEST_WSTORAGE=3;
    int MY_PERMISSIONS_REQUEST_CAMERA=4;
    int MY_PERMISSIONS_REQUEST_SEND_SMS=5;
    int MY_PERMISSIONS_REQUEST_RPS=6;
    //location
    LocationManager locationManager;
    private LatLng complain;
    private FusedLocationProviderClient mFusedLocationClient;
    //Intent
    Intent i;
    //api
    private GoogleApiClient mGoogleApiClient;

    @SuppressLint("MissingPermission")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        //get intents from google authentication activity
        Intent iEx = getIntent();
        UID = iEx.getStringExtra("UID");
        pPath = iEx.getStringExtra("Photo");
        nm = iEx.getStringExtra("Name");
        emid = iEx.getStringExtra("Email");

        Toolbar tbar = (Toolbar) findViewById(R.id.tbar);
        setSupportActionBar(tbar);
        //tab layout
        ViewPager viewPager = (ViewPager) findViewById(R.id.viewpager);
        //PagerAdapter adapter = new PagerAdapter();
        PagerAdapter adapter = new sih.practice.teststs.PagerAdapter(getSupportFragmentManager(),2,getApplicationContext(),UID);
        viewPager.setAdapter(adapter);
        TabLayout tabLayout = (TabLayout) findViewById(R.id.sliding_tabs);
        tabLayout.setupWithViewPager(viewPager);

        //Autogenerated
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        //setSupportActionBar(toolbar);

        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);
        fab.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {

                check_permission("WStorage");
                showPictureDialog();
            }
        });

        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        ActionBarDrawerToggle toggle = new ActionBarDrawerToggle(
                this, drawer, tbar, R.string.navigation_drawer_open, R.string.navigation_drawer_close);
        drawer.addDrawerListener(toggle);
        toggle.syncState();

        NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
        navigationView.setNavigationItemSelectedListener(this);
        //dont mess till here



        //navigation view set details
        View header = navigationView.getHeaderView(0);
        new DownloadImageTask((ImageView) header.findViewById(R.id.profilePhoto))
                .execute(pPath);
        em = (TextView) header.findViewById(R.id.EmailID);
        em.setText("" + emid);
        fn = (TextView) header.findViewById(R.id.FullName);
        fn.setText("" + nm);
        //logout
        GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
                .requestEmail()
                .build();
        mGoogleApiClient = new GoogleApiClient.Builder(getApplicationContext())
                .enableAutoManage(this, (GoogleApiClient.OnConnectionFailedListener) this)
                .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
                .build();
        //get location camera
        check_permission("Location");

    }
    public void signOut() {
        Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(
                new ResultCallback<Status>() {
                    @Override
                    public void onResult(Status status) {
                        Intent i=new Intent(getApplicationContext(),Authentication.class);
                        startActivity(i);
                        finish();
                    }
                });
    }
    @Override
    public void onBackPressed() {
        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        if (drawer.isDrawerOpen(GravityCompat.START)) {
            drawer.closeDrawer(GravityCompat.START);
        } else {
            super.onBackPressed();
        }
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.main, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        // Handle action bar item clicks here. The action bar will
        // automatically handle clicks on the Home/Up button, so long
        // as you specify a parent activity in AndroidManifest.xml.
        int id = item.getItemId();

        //noinspection SimplifiableIfStatement
        if (id == R.id.SOS) {
            check_permission("SMS");
            check_permission("RPS");
            SmsManager smsManager = SmsManager.getDefault();
            smsManager.sendTextMessage("8866112814", null, "-SOS- THIS IS HIGH LEVEL ENCROACHMENT -SOS-", null, null);
            Toast.makeText(getApplicationContext(),"SOS sent",Toast.LENGTH_SHORT).show();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }

    @SuppressWarnings("StatementWithEmptyBody")
    @Override
    public boolean onNavigationItemSelected(MenuItem item) {
        // Handle navigation view item clicks here.
        int id = item.getItemId();

        if (id == R.id.lingo) {
         Intent i = new Intent(getApplicationContext(),lang_sidedrawer.class);
         startActivity(i);
        } else if (id == R.id.tut) {
            Intent i = new Intent(getApplicationContext(),drawer_slider.class);
            startActivity(i);

        } else if (id == R.id.news) {
            Intent i = new Intent(getApplicationContext(),News.class);
            startActivity(i);

        } else if (id == R.id.CUs) {
            Intent i = new Intent(getApplicationContext(),Contactus.class);
            startActivity(i);

        } else if (id == R.id.AUs) {
            Intent i = new Intent(getApplicationContext(),Aboutus.class);
            startActivity(i);

        } else if (id == R.id.ovr) {
            Intent i = new Intent(getApplicationContext(),pie_chart.class);
            startActivity(i);
        } else if (id==R.id.lgt) {
            signOut();
        }



        DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
        drawer.closeDrawer(GravityCompat.START);
        return true;
    }

    //Photo dialog
    private void showPictureDialog(){
        AlertDialog.Builder pictureDialog = new AlertDialog.Builder(this);
        pictureDialog.setTitle("Select Action");
        String[] pictureDialogItems = {
                "Select photo from gallery",
                "Capture photo from camera" };
        pictureDialog.setItems(pictureDialogItems,
                new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        switch (which) {
                            case 0:
                                choosePhotoFromGallary();
                                break;
                            case 1:
                                check_permission("Camera");
                                takePhotoFromCamera();
                                break;
                        }
                    }
                });
        pictureDialog.show();
    }
    public void choosePhotoFromGallary() {
        check_permission("RStorage");
        getgps();
        Intent galleryIntent = new Intent(Intent.ACTION_PICK, MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
        startActivityForResult(galleryIntent, GALLERY);
    }
    private void takePhotoFromCamera() {
        check_permission("Camera");
        getgps();
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        startActivityForResult(intent, CAMERA);
    }
    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == this.RESULT_CANCELED) {
            return;
        }
        if (requestCode == GALLERY) {
            getgps();
            if (data != null) {
                Uri contentURI = data.getData();
                try {
                    Bitmap bitmap = MediaStore.Images.Media.getBitmap(this.getContentResolver(), contentURI);
                    String path = saveImage(bitmap);
                    Toast.makeText(MainActivity.this, "Image Saved!", Toast.LENGTH_SHORT).show();
                    i = new Intent(this, ViewImage.class);   //CHANGE
                    i.putExtra("URI", path);  //send image path
                    i.putExtra("Latitude",complain.latitude);
                    i.putExtra("Longitude",complain.longitude);
                    i.putExtra("UID",UID);
                    startActivity(i);
                } catch (IOException e) {
                    e.printStackTrace();
                    Toast.makeText(MainActivity.this, "Failed!", Toast.LENGTH_SHORT).show();
                }
            }
        } else if (requestCode == CAMERA) {
            getgps();
            Bitmap thumbnail = (Bitmap) data.getExtras().get("data");
            String path=saveImage(thumbnail);
            Toast.makeText(MainActivity.this, "Image Saved!", Toast.LENGTH_SHORT).show();
            Toast.makeText(MainActivity.this, complain.toString(), Toast.LENGTH_SHORT).show();
            i= new Intent(this,Complaints.class);
            i.putExtra("URI",path);
            i.putExtra("Latitude",complain.latitude);
            i.putExtra("Longitude",complain.longitude);
            i.putExtra("UID",UID);
            startActivity(i);
        }
    }
    public String saveImage(Bitmap myBitmap) {
        ByteArrayOutputStream bytes = new ByteArrayOutputStream();
        myBitmap.compress(Bitmap.CompressFormat.JPEG, 90, bytes);
        File wallpaperDirectory = new File(
                Environment.getExternalStorageDirectory() + IMAGE_DIRECTORY);
        // have the object build the directory structure, if needed.
        if (!wallpaperDirectory.exists()) {
            wallpaperDirectory.mkdirs();
        }
        try {
            File f = new File(wallpaperDirectory, Calendar.getInstance()
                    .getTimeInMillis() + ".jpg");
            f.createNewFile();
            FileOutputStream fo = new FileOutputStream(f);
            fo.write(bytes.toByteArray());
            MediaScannerConnection.scanFile(this,
                    new String[]{f.getPath()},
                    new String[]{"image/jpeg"}, null);
            fo.close();
            Log.d("Photo", "File Saved::--->" + f.getPath());
            return f.getPath().toString();
        } catch (IOException e1) {
            e1.printStackTrace();
        }
        return "";
    }

    //checking for permissions
    public static void firstTimeAskingPermission(Context context, String permission, boolean isFirstTime){
        SharedPreferences sharedPreference = context.getSharedPreferences(PREFS_FILE_NAME, MODE_PRIVATE);
        sharedPreference.edit().putBoolean(permission, isFirstTime).apply();
    }

    public static boolean isFirstTimeAskingPermission(Context context, String permission){
        return context.getSharedPreferences(PREFS_FILE_NAME, MODE_PRIVATE).getBoolean(permission, true);
    }
    public void check_permission(String p)
    {
        if(p=="Location") {
            if (ContextCompat.checkSelfPermission(getApplicationContext(),
                    Manifest.permission.ACCESS_FINE_LOCATION)
                    != PackageManager.PERMISSION_GRANTED) {
                // Should we show an explanation?
                if (ActivityCompat.shouldShowRequestPermissionRationale(this,
                        Manifest.permission.ACCESS_FINE_LOCATION)) {
                    // Show an explanation to the user *asynchronously* -- don't block
                    // this thread waiting for the user's response! After the user
                    // sees the explanation, try again to request the permission.
                } else {
                    if (isFirstTimeAskingPermission(getApplicationContext(), Manifest.permission.ACCESS_FINE_LOCATION)) {
                        firstTimeAskingPermission(getApplicationContext(),
                                Manifest.permission.ACCESS_FINE_LOCATION, false);
                        // No explanation needed, we can request the permission.
                        ActivityCompat.requestPermissions(this,
                                new String[]{Manifest.permission.ACCESS_FINE_LOCATION},
                                MY_PERMISSIONS_REQUEST_FINE_LOCATION);
                    } else {
                        //Permission disable by device policy or user denied permanently. Show proper error message
                    }
                }
            } else {
                locationManager = (LocationManager) getApplicationContext().getSystemService(Context.LOCATION_SERVICE);
                boolean gps_enabled = false;
                boolean network_enabled = false;

                try {
                    gps_enabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);
                } catch (Exception ex) {
                }

                try {
                    network_enabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);
                } catch (Exception ex) {
                }

                if (!gps_enabled && !network_enabled) {
                    // notify user
                    AlertDialog.Builder dialog = new AlertDialog.Builder(this);
                    dialog.setMessage(getApplicationContext().getResources().getString(R.string.gps_network_not_enabled));
                    dialog.setPositiveButton(getApplicationContext().getResources().getString(R.string.open_location_settings), new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface paramDialogInterface, int paramInt) {
                            Intent myIntent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                            getApplicationContext().startActivity(myIntent);
                        }
                        //getgps
                    });
                    mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this);


                    mFusedLocationClient.getLastLocation()
                            .addOnSuccessListener(this, new OnSuccessListener<Location>() {
                                @Override
                                public void onSuccess(Location location) {
                                    // Got last known location. In some rare situations this can be null.
                                    if (location != null) {
                                        complain = new LatLng(location.getLatitude(),location.getLongitude());
                                        Log.d("Map","Got last known");
                                    }
                                }
                            });
                    dialog.setNegativeButton(getApplicationContext().getString(R.string.Cancel), new DialogInterface.OnClickListener() {

                        @Override
                        public void onClick(DialogInterface paramDialogInterface, int paramInt) {
                        }
                    });
                    dialog.show();
                } else {
                    mFusedLocationClient = LocationServices.getFusedLocationProviderClient(this);


                    mFusedLocationClient.getLastLocation()
                            .addOnSuccessListener(this, new OnSuccessListener<Location>() {
                                @Override
                                public void onSuccess(Location location) {
                                    // Got last known location. In some rare situations this can be null.
                                    if (location != null) {
                                        complain = new LatLng(location.getLatitude(),location.getLongitude());
                                        Log.d("Map","Got last known");
                                    }
                                }
                            });
                }
            }
        }
        if(p=="RStorage")
        {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE )== PackageManager.PERMISSION_GRANTED)
            {

            }
            else if(ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE )== PackageManager.PERMISSION_DENIED)
            {
                request_permission(p);
                check_permission(p);
            }
            else
            {
                request_permission(p);
                check_permission(p);
            }
        }
        if(p=="WStorage")
        {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE )== PackageManager.PERMISSION_GRANTED)
            {

            }
            else if(ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE )== PackageManager.PERMISSION_DENIED)
            {
                request_permission(p);
                check_permission(p);
            }
            else
            {
                request_permission(p);
                check_permission(p);
            }
        }
        if(p=="Camera")
        {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA )== PackageManager.PERMISSION_GRANTED)
            {

            }
            else if(ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA )== PackageManager.PERMISSION_DENIED)
            {
                request_permission(p);
                check_permission(p);
            }
            else
            {
                request_permission(p);
                check_permission(p);
            }
        }
        if(p=="SMS")
        {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.SEND_SMS)== PackageManager.PERMISSION_GRANTED)
            {

            }
            else if(ContextCompat.checkSelfPermission(this, Manifest.permission.SEND_SMS )== PackageManager.PERMISSION_DENIED)
            {
                request_permission(p);
                check_permission(p);
            }
            else
            {
                request_permission(p);
                check_permission(p);
            }
        }
        if(p=="RPS")
        {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE)== PackageManager.PERMISSION_GRANTED)
            {

            }
            else if(ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE )== PackageManager.PERMISSION_DENIED)
            {
                request_permission(p);
                check_permission(p);
            }
            else
            {
                request_permission(p);
                check_permission(p);
            }
        }
}
public void request_permission(String p)
{
    if(p=="Location")
    {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION )!= PackageManager.PERMISSION_GRANTED)
        {
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},MY_PERMISSIONS_REQUEST_FINE_LOCATION);
        }
    }
    if(p=="Camera")
    {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA )!= PackageManager.PERMISSION_GRANTED)
        {
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.CAMERA},MY_PERMISSIONS_REQUEST_CAMERA);
        }
    }
    if(p=="RStorage")
    {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_EXTERNAL_STORAGE )!= PackageManager.PERMISSION_GRANTED)
        {
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.READ_EXTERNAL_STORAGE},MY_PERMISSIONS_REQUEST_RSTORAGE);
        }
    }
    if(p=="WStorage")
    {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE )!= PackageManager.PERMISSION_GRANTED)
        {
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE},MY_PERMISSIONS_REQUEST_WSTORAGE);
        }
    }
    if(p=="SMS")
    {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.SEND_SMS )!= PackageManager.PERMISSION_GRANTED)
        {
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.SEND_SMS},MY_PERMISSIONS_REQUEST_SEND_SMS);
        }
    }

    if(p=="RPS")
    {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE )!= PackageManager.PERMISSION_GRANTED)
        {
            ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.READ_PHONE_STATE},MY_PERMISSIONS_REQUEST_RPS);
        }
    }
}
//Location
    @Override
    public void onLocationChanged(Location location) {
        Log.d("Maps","Listener called");
        LatLng latLng = new LatLng(location.getLatitude(),location.getLongitude());
        complain = latLng;
    }

    @Override
    public void onStatusChanged(String provider, int status, Bundle extras) {

    }

    @Override
    public void onProviderEnabled(String provider) {

    }

    @Override
    public void onProviderDisabled(String provider) {

    }

    @SuppressLint("MissingPermission")
    public void getgps()
    {
        Log.d("Map","Called");
        mFusedLocationClient = LocationServices.getFusedLocationProviderClient(getApplicationContext());


        mFusedLocationClient.getLastLocation()
                .addOnSuccessListener(this, new OnSuccessListener<Location>() {
                    @Override
                    public void onSuccess(Location location) {
                        // Got last known location. In some rare situations this can be null.
                        if (location != null) {
                            complain = new LatLng(location.getLatitude(),location.getLongitude());
                            Log.d("Map","Got last known");
                        }
                    }
                });

        locationManager = (LocationManager)getSystemService(Context.LOCATION_SERVICE);
        Criteria criteria = new Criteria();
        String provider=locationManager.getBestProvider(criteria,false);
        locationManager.requestLocationUpdates(provider,1000,10,this);
        Log.d("Map","location manager called");
    }


    @Override
    public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

    }
}

//For profile picture
class DownloadImageTask extends AsyncTask<String, Void, Bitmap> {
    ImageView bmImage;
    public DownloadImageTask(ImageView bmImage) {
        this.bmImage = bmImage;
    }
    protected Bitmap doInBackground(String... urls) {
        String urldisplay = urls[0];
        Bitmap mIcon11 = null;
        try {
            InputStream in = new java.net.URL(urldisplay).openStream();
            mIcon11 = BitmapFactory.decodeStream(in);
        } catch (Exception e) {
            Log.e("Error", e.getMessage());
            e.printStackTrace();
        }
        return mIcon11;
    }
    protected void onPostExecute(Bitmap result) {
        bmImage.setImageBitmap(result);
    }
}
